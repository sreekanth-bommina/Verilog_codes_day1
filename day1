//Encoder

//with if condition 
module pri_enc(input [7:0]i,output reg [2:0]y);
    always@(*)begin
	    if(i[7]==1) y=3'b111;
	    else if(i[6]==1) y=3'b110;
	    else if(i[5]==1) y=3'b101;
	    else if(i[4]==1) y=3'b100;
	    else if(i[3]==1) y=3'b011;
	    else if(i[2]==1) y=3'b010;
	    else if(i[1]==1) y=3'b001;
	    else if(i[0]==1) y=3'b000;
		else y=3'bzzz;
	end
endmodule

//with casex
module pri_enc(input [7:0]i,output reg [2:0]y);
     always(*)begin
	    casex(i)
		   8'b1xxxxxxx:y=3'b111;
		   8'b01xxxxxx:y=3'b111;
		   8'b001xxxxx:y=3'b111;
		   8'b0001xxxx:y=3'b111;
		   8'b00001xxx:y=3'b111;
		   8'b000001xx:y=3'b111;
		   8'b0000001x:y=3'b111;
		   8'b00000001:y=3'b111;
		   default y=3'bzzz;
		endcase
	 end
endmodule 


  //full adder
      
module fa(input a,b,c, output sum,carry);
   assign sum=a^b^cin;
   assign carry=a&b|b&c|a&c;
endmodule

module fa(input a,b,c, output sum,carry);
   assign {carry,sum}=a+b;
endmodule 


//2 bit multiplier

  module multiplier_2bit (
    input  [1:0] a,    
    input  [1:0] b,    
    output [3:0] y     
);
    wire p0, p1, p2, p3, s1, c1;

    
    assign p0 = a[0] & b[0];
    assign p1 = a[0] & b[1];
    assign p2 = a[1] & b[0];
    assign p3 = a[1] & b[1];

    assign y[0] = p0;
    assign s1   = p1 ^ p2;
    assign c1   = p1 & p2;
    assign y[1] = s1;
    assign y[2] = p3 ^ c1;
    assign y[3] = p3 & c1;
endmodule


module multiplier_2bit (
    input  [1:0] a,    
    input  [1:0] b,    
    output [3:0] y     
);
  assign y=a*b;
endmodule 
